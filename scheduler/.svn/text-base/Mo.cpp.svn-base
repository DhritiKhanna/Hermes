#include "Mo.hpp"
#include "utility.hpp"

extern bool is_eql(std::pair<CB, CB> p1, std::pair<CB, CB> p2);

/* constructor */

M::M(){
  
}

std::ostream & operator<<(std::ostream &os, const M &c)
{
  // std::vector < std::pair <CB, CB> >::const_iterator it, it_end;
  // it_end = c._MSet.end();
  // os << "M["<< std::endl;
  // if(c._MSet.empty())
  //   os << "EMPTY" <<std::endl;
  // else {
  // for (it = c._MSet.begin(); it != it_end; it ++ )
  //   os << (*it).first << "," << (*it).second <<std::endl;
  
  // os <<"]\n";
  // }
 
  std::multimap<ME, ME, mapComp1>::const_iterator it, it_end;
  it_end = c._MSet.end();
  
  if(c._MSet.empty()){
    os << "EMPTY _MSet" << std::endl;
  }
  else{
    os << "M["<< std::endl;
    for(it = c._MSet.begin(); it != it_end; it ++){
      os << "[" << (*it).first.first << "," << (*it).second.first << "]" 
        << "---" 
	<< "[" << (*it).first.second << "," << (*it).second.second << "]" 
	<< std::endl;
    }
    os <<"]\n";  
  }
  return os;
}

// Idea: We can also pass the return object by reference

std::set <CB> M::MImage(CB c) {

  std::set<CB> _MImage;
 
  _MIterator it, it_end;
  it_end = _MSet.end();

  //Debug Print
  // std::cout << " _MSet.size =  " << _MSet.size() <<  std::endl;

  int a = c._pid; 
  int b = c._index;
  
  for(it = _MSet.begin(); it != it_end; it++) {
    
    // if ((*it).first == c)
    //   _MImage.insert((*it).second);
    
    // else if((*it).second == c )
    //   _MImage.insert((*it).first);

    if((*it).first.first == a)  { 
      if((*it).second.first == b) 
	_MImage.insert(CB ((*it).first.second, (*it).second.second));
    }
    else if ((*it).first.second == a){
      if ((*it).second.second == b)
	_MImage.insert(CB ((*it).first.first, (*it).second.first));
    }
  }

  return _MImage;
}


std::set <CB> M::MImageRestricted(CB c, CB d) {

  std::set<CB> _MImage;
 
  _MIterator it, it_end;
  it_end = _MSet.end();

  //Debug Print
  // std::cout << " _MSet.size =  " << _MSet.size() <<  std::endl;

  int a = c._pid; 
  int b = c._index;
  
  for(it = _MSet.begin(); it != it_end; it++) {
    
    // if ((*it).first == c)
    //   _MImage.insert((*it).second);
    
    // else if((*it).second == c )
    //   _MImage.insert((*it).first);

    if((*it).first.first == a)  { 
      if((*it).second.first == b && (*it).second.second < d._index ) 
	_MImage.insert(CB ((*it).first.second, (*it).second.second));
    }
    else if ((*it).first.second == a){
      if ((*it).second.second == b && (*it).second.first < d._index)
	_MImage.insert(CB ((*it).first.first, (*it).second.first));
    }
  }

  return _MImage;
}


bool M::CheckMImage(CB c , int pid)
{
  
  // std::vector <std::pair <CB, CB> > ::iterator it, it_end;
  _MIterator it, it_end;
  
  it_end = _MSet.end();

  //Debug Print
  // std::cout << " _MSet.size =  " << _MSet.size() <<  std::endl;

  for(it = _MSet.begin(); it != it_end; it++) {
    
    //    if((*it).first == c && (*it).second._pid != pid) 
    if((*it).first.first == c._pid && 
       (*it).second.first == c._index && 
       (*it).first.second != pid) 
      return false;
    
    //  else if( (*it).second == c && (*it).first._pid != pid) {
    else if((*it).first.second == c._pid && 
	    (*it).second.second == c._index && 
	    (*it).first.first != pid) 
      return false;
  }
  
  return true;
  
}



std::set<CB> M::MImageNotFrom(CB c, int from){
  
  std::set<CB> _coi;
  // std::vector <std::pair <CB, CB> >::iterator it, it_end;
  // it_end = _MSet.end();
 
  // //std::cout<< " In findCoEnabledImageNotFrom func with D1's entry: " << c << " and its CoI coming from other than " <<from <<std::endl;

  // for(it = _MSet.begin(); it != it_end; it++) {
  //   if(((*it).first == c) && (*it).second._pid != from) {
  //     _coi.insert((*it).second);
  //   }
  //  else if( (*it).second == c && (*it).first._pid != from) {
  //     _coi.insert((*it).first);
  //   }
  // }

  return _coi;


}

CB M::FirstM(std::set<CB> _coi, int pid) {

  std::set<CB>::iterator it, it_end;
  it_end = _coi.end();

  CB _min(pid, 50000);

  for(it = _coi.begin(); it != it_end; it++) {
    if((*it)._pid == pid && (*it)._index < _min._index)
      _min = *it;
  }
  return _min;
}

CB M:: LastM(std::set<CB> _coi, int pid) {
 

  std::set<CB>::iterator it, it_end;
  it_end = _coi.end();

  CB _max(pid, -1);

  for(it = _coi.begin(); it != it_end; it++) {
    if((*it)._pid == pid && (*it)._index > _max._index)
      _max = *it;
  }

  return _max;
}

_MIterator M:: IsPresent(std::pair<CB, CB> & p)
{
  // CB c1 = p.first;
  // CB c2 = p.second;
  
  // if(c1._pid == -1 || c2._pid == -1 ||
  //    c1._index == -1 || c2._index == -1) 
  //   assert(false);

  // _MIterator it, it_end;

  
  // it_end = _MSet.end();
  
  // for(it = _MSet.begin(); it != it_end; it++)
  //   if( is_eql(p, (*it)) )
  //     return it;

  // return it;

  std::pair <int, int> a = std::pair<int, int>(p.first._pid, p.second._pid);
  
  std::pair <int, int> b = std::pair<int, int>(p.first._index, p.second._index);
 
  if(a.first == -1 || a.second == -1 ||
     b.first == -1 || b.second == -1) 
    assert(false);
  
  _MIterator it, it_end;
  
  
  it_end = _MSet.end();
  
  std::pair <_MIterator, _MIterator> ret;
  
  ret = _MSet.equal_range(a);
  

  for(it = ret.first; it != ret.second; it++)
    if((*it).second.first == b.first && (*it).second.second == b.second)
      return it;

  return it_end; 
}


void M::RemoveME(std::pair <CB, CB> p){
  _MIterator i = IsPresent(p);
   
  if(i != _MSet.end()){
    _MSet.erase(i);

    //Debug Print
      std::cout << "removed a match edge: "
		<< p.first  
		<<  " --- "  
		<< p.second
		<< std::endl;


  }
  
}

void M::AddME (std::pair<CB, CB> p){

  //  _MSet.push_back(p);
  std::pair <int, int> a = std::pair<int, int>(p.first._pid, p.second._pid);
  
  std::pair <int, int> b = std::pair<int, int>(p.first._index, p.second._index);

  // _MIterator it = IsPresent(p);

  //if(it == _MSet.end()){
      _MSet.insert(std::pair <ME, ME> (a,b));
      
      //Debug Print
      std::cout << "added a wait-for edge: "
		<< p.first  
		<<  " ---> "  
		<< p.second
		<< std::endl;
      //}
}

bool M:: Update(std::pair <CB, CB> _pcer) {
 
  _MIterator it = IsPresent(_pcer);
 
  if(it == _MSet.end()){
    // _MSet.push_back(_pcer);
    AddME(_pcer);
    return true;
  }

  // return false, _pcer is present
   return false;
}



void M::UpdateAncs(Node* ncurr, int _psrc, int _pdst, std::set<int> _aset, int &_diff) 
{
  std::set<int>::reverse_iterator _sit, _sitend;
  _sitend = _aset.rend();
  
  // reverse iterate on the set to find immediate ancestors

  for(_sit = _aset.rbegin(); _sit != _sitend; _sit++) {

    //    CB  _cb = *(new CB(_pdst, *_sit));
    CB  _cb (_pdst, *_sit);
    Transition *_t = ncurr->GetTransition(_cb);
    Envelope *env = _t->GetEnvelope(); 
    
    /* Find Ancestor receives that can match Scurr */
    if(env->isRecvTypeOnly()) {
      if(!env->src_wildcard) { // env is recv and is deterministic
	if(env->src == _psrc) {  // check is sourcing from Scurr's pid
	  if (Update(std::pair<CB, CB> (ncurr->curr_match_set.front(), _cb)))
	    _diff--;                       
	}
      }
      else { // env is a wildcard
	if (Update(std::pair<CB, CB> (ncurr->curr_match_set.front(), _cb))) 
	  _diff--;
      }
    
    }
    
    if(_diff == 0)
      return;
  }
}

void M::UpdateDesc(Node* ncurr, Node* nlast, int _psrc, int _pdst, std::set<int> _aset, int &_diff) 
{
    
  std::set<int>::iterator _sit, _sitend;
  _sitend = _aset.end();

  // reverse iterate on the set to find immediate ancestors
  for(_sit = _aset.begin(); _sit != _sitend; _sit++) {
    
    //    CB _cb = *(new CB(_pdst, *_sit));
    CB _cb (_pdst, *_sit);
    Transition *_t = nlast->GetTransition(_cb);
    
    //std::cout << "_cb: " << _cb << std::endl;
    //std::cout << "ncurr_curr_match_set : " << ncurr->curr_match_set.front() << std::endl;
   
    Envelope *env = _t->GetEnvelope();
    
    if(env->isRecvTypeOnly()){
      if(!env->src_wildcard) {
	if(env->src == _psrc) {
	  if (Update(std::pair<CB, CB> (ncurr->curr_match_set.front(), _cb)))
	    _diff--;                       
	}
      }
      else {
	if (Update(std::pair<CB, CB> (ncurr->curr_match_set.front(), _cb))) 
	  _diff--;
      }
         
    }
    
    if(_diff == 0)
      return;
  }
}


void M::ConstructAncs(Node* ncurr, Node* nlast) {
  
  if(ncurr->curr_match_set.back()._pid >= ncurr->NumProcs() || 
     ncurr->curr_match_set.back()._pid < 0)
    return;
  
     /*
       Add the current match in the Mo set 
       
     */ 
     Envelope *env;
     if (!ncurr->curr_match_set.empty())
       env = ncurr->GetTransition(ncurr->curr_match_set.back())->GetEnvelope();

     if(env->isRecvTypeOnly() && !ncurr->curr_match_set.empty()){
       bool flag = Update(std::pair<CB, CB> (ncurr->curr_match_set.front(),ncurr->curr_match_set.back() )); 
       //std::cout << *env <<std::endl;
     }
     
     if(ncurr->curr_match_set.size() == 2 && env->isRecvTypeOnly()) {
       
       int _psrc = ncurr->curr_match_set.front()._pid; // sending process pid
       int _pdst = ncurr->curr_match_set.back()._pid;  // recv process pid
       
       /* get differential count between <Scurr, Rcurr> */
       int _diff = ncurr->_countracker.getDiffCount(_psrc, _pdst);
    
       // debug print
       
       // std::cout << "_diff : " << _diff << std::endl;
       
       
       std::set<int> _aset;
       std::vector<int> _alist;
    
       _alist.push_back(ncurr->curr_match_set.back()._index);
       
       // debug print
       //
       //_aset = getAllAncestorList(ncurr, ncurr->curr_match_set.back());
       //std::cout << ncurr->curr_match_set.back() << std::endl;
       
       while(_diff > 0) {
	 
	 _aset = getImmediateAncestorList(ncurr, _pdst, _alist);
	 if(_aset.empty()) {
	   // debug print
	   //
	   //std::cout << "breaking out from empty set\n";
	   break;
	 }
     
	 UpdateAncs(ncurr, _psrc, _pdst, _aset, _diff);
	 
	 //std::cout << "diff after CeR : " << _diff << std::endl;
	 // assert(_diff == 0);
	 
      _alist.clear();
      
      for(std::set<int>::iterator it = _aset.begin(); 
	  it != _aset.end(); it++){
	_alist.push_back(*it);
      }
    }
    assert(_diff == 0);
  }
}


void M::ConstructDesc(Node* ncurr, Node* nlast) {
  
  if(ncurr->curr_match_set.back()._pid >= ncurr->NumProcs()  )
    return;
  
  
  Envelope* env = ncurr->GetTransition(ncurr->curr_match_set.back())->GetEnvelope();
  
  if(ncurr->curr_match_set.size() == 2 && env->isRecvTypeOnly()){
    
    int _psrc = ncurr->curr_match_set.front()._pid; // sending process pid
    int _pdst = ncurr->curr_match_set.back()._pid;  // recv process pid
   
    int _ldiff = nlast->_countracker.getDiffCount(_psrc, _pdst) - ncurr->_countracker.getDiffCount(_psrc, _pdst);
    // debug print
    //
    //std::cout << "_ldiff : " << _ldiff << std::endl;
    //nlast->_countracker.debugPrint();
    //ncurr->_countracker.debugPrint();
    //
    //debug print
    //
    //std::set<int> _dset = getAllDescendantList(nlast, ncurr->curr_match_set.back());
    //std::cout << ncurr->curr_match_set.back() << std::endl;

    std::set<int> _dset;
    std::vector<int> _dlist;
    _dlist.push_back(ncurr->curr_match_set.back()._index);
   
    while(_ldiff > 0) {
      _dset = getImmediateDescendantList(nlast, _pdst, _dlist);
     
      if(_dset.empty()) {
	break;
      }
      
      UpdateDesc(ncurr, nlast, _psrc, _pdst, _dset, _ldiff);
     
      _dlist.clear();

      for(std::set<int>::iterator it = _dset.begin(); it != _dset.end(); it++){
	_dlist.push_back(*it);                
      }
    }
    assert(_ldiff == 0);
  }
}




void M::_MConstruct(ITree *itree) {

  Node *nlast, *ncurr;

  // get the last node of itree
  nlast = itree->_slist[itree->_slist.size()-1];

  std::vector<Node*>::iterator _slist_it, _slist_it_end;

  _slist_it_end = itree->_slist.end();

  // iterate over the state vector for the current trace
  for(_slist_it = itree->_slist.begin();
      _slist_it != _slist_it_end; _slist_it++) {
  
    ncurr = *(_slist_it);
  
    // debug print
    //   ncurr->_countracker.debugPrint();
    
    //    std::cout<< "Going in Ancs construction ..." <<std::endl;
    ConstructAncs(ncurr, nlast);
    // std::cout<< "success in Ancs construction" <<std::endl;
    ConstructDesc(ncurr, nlast);
  }
}
